<!-- This deposit is being encapsulated by Saiyed Afak Ahmed before the amount is being deposited into the database -->
<?php
class AccountManager
{
    private $conn;

    public function __construct($servername, $username, $password, $dbname)
    {
        // Establish database connection
        $this->conn = new mysqli($servername, $username, $password, $dbname);
        if ($this->conn->connect_error) {
            die("Connection failed: " . $this->conn->connect_error);
        }
    }

    public function __destruct()
    {
        $this->conn->close();
    }

    public function depositAmount($accountNumber, $depositAmount)
    {
        // Validate deposit amount
        if (!is_numeric($depositAmount) || $depositAmount <= 0) {
            return "Error: Invalid deposit amount.";
        }

        // Prepare SQL statement to fetch account balance
        $select_sql = "SELECT account_balance FROM accounts WHERE account_number = ?";
        $stmt = $this->conn->prepare($select_sql);
        if ($stmt === false) {
            return "Error: Could not prepare statement: " . $this->conn->error;
        }

        $stmt->bind_param("s", $accountNumber);

        // Execute statement
        if (!$stmt->execute()) {
            return "Error: Could not execute statement: " . $stmt->error;
        }

        // Get result
        $result = $stmt->get_result();
        $stmt->close(); // Close the statement

        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            $account_balance = $row['account_balance'];

            // Calculate new balance
            $new_balance = $account_balance + $depositAmount;

            // Prepare SQL statement to update account balance
            $update_sql = "UPDATE accounts SET account_balance = ? WHERE account_number = ?";
            $update_stmt = $this->conn->prepare($update_sql);
            if ($update_stmt === false) {
                return "Error: Could not prepare update statement: " . $this->conn->error;
            }

            $update_stmt->bind_param("ds", $new_balance, $accountNumber); // Use 'd' for double (float)

            // Execute update statement
            if (!$update_stmt->execute()) {
                return "Error: Could not update balance: " . $update_stmt->error;
            }

            $update_stmt->close(); // Close the update statement

            // Return the new balance
            return "New account balance: $" . number_format($new_balance, 2);
        } else {
            return "Error: Account not found.";
        }
    }
}

session_start();

$servername = "localhost";
$username = "root";
$password = "";
$dbname = "sbi";

$accountManager = new AccountManager($servername, $username, $password, $dbname);

// Ensure the session variable is set
if (!isset($_SESSION['account_number'])) {
    echo "Error: No account number found in session.";
    exit;
}

$accountNumber = $_SESSION['account_number'];

// Validate and sanitize deposit amount input
if (isset($_POST['depositAmount'])) {
    $depositAmount = filter_var($_POST['depositAmount'], FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_FRACTION);
} else {
    echo "Error: Deposit amount not set.";
    exit;
}

// Check if depositAmount is numeric after sanitization
if (!is_numeric($depositAmount) || $depositAmount <= 0) {
    echo "Error: Invalid deposit amount.";
    exit;
}

$newAccountBalance = $accountManager->depositAmount($accountNumber, $depositAmount);

// Output the new account balance or error message
echo $newAccountBalance;
?>
